<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="//post/test.html"/>
      <url>//post/test.html</url>
      
        <content type="html"><![CDATA[<p>啊啊啊啊啊sdasdasdasdas</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>String类和常量池</title>
      <link href="//post/String%E7%B1%BB%E5%92%8C%E5%B8%B8%E9%87%8F%E6%B1%A0.html"/>
      <url>//post/String%E7%B1%BB%E5%92%8C%E5%B8%B8%E9%87%8F%E6%B1%A0.html</url>
      
        <content type="html"><![CDATA[<p><font color='#4da8ee'>JVM常量池:</font></p><p>主要分为Class文件常量池、<strong>运行</strong>时常量池，全局字符串常量池，以及基本类型包装类对象常量池</p><p><font color='#4da8ee'>常量:</font></p><ul><li>用 final 修饰的成员变量表示常量，值一旦给定就无法改变！</li><li>final 修饰的变量有三种：静态变量、实例变量和局部变量，分别表示三种类型的常量。</li></ul><h1 id="1-String类的概念（重点）"><a href="#1-String类的概念（重点）" class="headerlink" title="1.String类的概念（重点）"></a>1.String类的概念（重点）</h1><ul><li>改类使用final关键字修饰，表示该类不能被继承</li><li>exends object 继承自对象，所以前面章节中重写的equals&#x2F;hashcode&#x2F;tostring都继承下来了，而且本类还实现了一些接口。</li><li>从jdk1.9开始该类的底层不使用char[]来存储数据，而是改成 byte[]加上编码标记，从而（实际上目的）<font clolr='font'></font>。</li></ul><h1 id="2-常量池的概念"><a href="#2-常量池的概念" class="headerlink" title="2.常量池的概念"></a>2.常量池的概念</h1><p>由于String类型描述的字符串内容是常量不可改变，因此Java虚拟机将<font color="red">首次出现</font>的字符串放入常量池中，若后续代码中出现了相同字符串内容则<font color="red">直接使用</font>池中已有的字符串对象而无需申请内存及创建对象，从而提高了性能。<br>首次出现的字符串放入常量池中，再次使用的时候就不需要重新创建对象直接在常量池中拿出来使用就好了</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> String类 </category>
          
          <category> 常量池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化部署前端项目到服务器</title>
      <link href="//post/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%88%B0%E5%AF%B9%E5%BA%94%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
      <url>//post/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%88%B0%E5%AF%B9%E5%BA%94%E6%9C%8D%E5%8A%A1%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>设置完成自动化部署后,我们再package.json文件的scripts下添加一句启动命令,之后我们通过执行<code>npm run deploy</code>即可完成部署</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"****"</span><span class="token punctuation">,</span>     <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"****"</span><span class="token punctuation">,</span>     <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"node ./deploy/shell.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="相关依赖"><a href="#相关依赖" class="headerlink" title="相关依赖"></a>相关依赖</h1><p>在写代码前需要安装两个依赖包:node-ssh和archiver<br><code>npm install node-ssh archiver --save</code></p><ul><li>node-ssh执行SSH远程登录、远程命令执行</li><li>archiver负责文件压缩打包</li></ul><h1 id="自动化部署帮忙做的事情"><a href="#自动化部署帮忙做的事情" class="headerlink" title="自动化部署帮忙做的事情"></a>自动化部署帮忙做的事情</h1><p>1.压缩本地dist文件<br>2.远程ssh登录(建议免密登录)<br>3.本地dist.zip压缩包拷贝至远程服务器指定目录下<br>4.执行远程部署脚本(这里建议写一个sh部署脚本)</p><span id="more"></span><h1 id="脚本开发"><a href="#脚本开发" class="headerlink" title="脚本开发"></a>脚本开发</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文件操作</span><span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 路径操作</span><span class="token keyword">let</span> archiver <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'archiver'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打包操作</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> NodeSSH <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'node-ssh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SSH远程登录服务器</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> execSync <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行命令</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">// 编译打包</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hexo clean</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// 清空编译</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hexo g</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token literal-property property">stdio</span><span class="token operator">:</span> <span class="token string">'inherit'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 重新编译</span>  <span class="token comment">// 正确设置本地dist文件路径</span>  <span class="token keyword">const</span> deployPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token comment">// 打包成zip所在的目录</span>  <span class="token keyword">const</span> distPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../public'</span><span class="token punctuation">)</span> <span class="token comment">// 编译完成目录</span>  <span class="token comment">// 服务器对象</span>  <span class="token keyword">let</span> connectOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">// ip</span>      <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token comment">// 服务器用户名</span>      <span class="token literal-property property">port</span> <span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token comment">// 端口，记得在控制台打开防火墙</span>      <span class="token literal-property property">pathUrl</span><span class="token operator">:</span><span class="token string">'/www/wwwroot/www.duduaaBlog.com'</span><span class="token punctuation">,</span> <span class="token comment">// 项目所在目录</span>      <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">''</span> <span class="token comment">// 服务器密码</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 连接到服务器</span>  <span class="token keyword">const</span> ssh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeSSH</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">connect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    ssh      <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>connectOptions<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Connect success!'</span><span class="token punctuation">)</span>        <span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 链接成功或上传文件</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Connect error:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>   <span class="token comment">// 上传文件到服务器</span>   <span class="token keyword">const</span> <span class="token function-variable function">uploadFile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 上传zip文件到 服务器对应的文件夹</span>    ssh<span class="token punctuation">.</span><span class="token function">putFile</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>deployPath<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/public.zip</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>connectOptions<span class="token punctuation">.</span>pathUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/public.zip</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Upload file success'</span><span class="token punctuation">)</span>        <span class="token comment">// 上传成功后在指定目录下执行解压，并且删除zip包 </span>        ssh<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'unzip -o public.zip &amp;&amp; rm -rf public.zip'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">cwd</span><span class="token operator">:</span> connectOptions<span class="token punctuation">.</span>pathUrl <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The update message is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>result<span class="token punctuation">.</span>stdout<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Gratefule! update success!'</span><span class="token punctuation">)</span>            process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Something wrong:'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>            process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Upload file error:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 本地文件压缩</span>  <span class="token keyword">const</span> <span class="token function-variable function">zipDirector</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> output <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>__dirname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/public.zip</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token keyword">const</span> archive <span class="token operator">=</span> <span class="token function">archiver</span><span class="token punctuation">(</span><span class="token string">'zip'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">zlib</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">level</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 压缩层级 目前我们只有2层</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> err    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    output<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Something error width the zip process:'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 压缩成功执行链接服务器操作</span>      <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>archive<span class="token punctuation">.</span><span class="token function">pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> total bytes</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Archiver has been finalized and the output file descriptor has closed.'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    output<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Data has been drained'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    archive<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>    archive<span class="token punctuation">.</span><span class="token function">directory</span><span class="token punctuation">(</span>distPath<span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span>    archive<span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 执行压缩操作</span>  <span class="token function">zipDirector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> JavaScript </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建next主题</title>
      <link href="//post/hexo%E6%90%AD%E5%BB%BAnext%E4%B8%BB%E9%A2%98.html"/>
      <url>//post/hexo%E6%90%AD%E5%BB%BAnext%E4%B8%BB%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用next主题的前提是需要安装好 Node.Js、Hexo以及注册好Github账户;</p></blockquote><h1 id="Github相关"><a href="#Github相关" class="headerlink" title="Github相关"></a>Github相关</h1><h2 id="一、注册Github"><a href="#一、注册Github" class="headerlink" title="一、注册Github"></a>一、注册Github</h2><p>打开官网:<a href="https://github.com/">Github官网</a></p><p>1.点击  <b><em>sign up</em></b> 注册</p><p>2.填写相关信息点击 <b><em>Next: select a plan</em></b>进入下一页</p><p>3.选择账户类型：GitHub 的仓库分为两种，一种是public repositories公开免费版，一种是private repositories私有付费版其中，免费版是完全公开的，而私有版一般是由企业或者不愿公开仓库的个人用户购买，在这里，我们选择免费版就可以，然后点击 <b><em>Choose Free</em></b>，进入下一页</p><p>4.有一个问卷调查，填不填都无所谓，如果填完就点击 <b><em>Complete setup</em></b>, 如果不想填就点击 <b><em>Skip this step</em></b> 跳过。</p><p>5.接下来就是验证邮箱地址了，GitHub会发送邮件到你刚才填的邮箱地址，例如我填的是QQ邮箱，登录QQ邮箱，打开收到的邮件，点击 <b><em>Verify email address</em></b>, 进入Github的登录界面，点击<b><em>sign in</em></b>会要求填写验证码，再次进入邮箱查看验证码，填写后登录</p><p>6.进入Github后先创建一个代码仓库</p><p>打开官网:<a href="https://github.com/">Github</a></p><span id="more"></span><p>1.点击  <b><em>sign up</em></b> 注册</p><p>2.填写相关信息点击 <b><em>Next: select a plan</em></b>进入下一页</p><p>3.选择账户类型：GitHub 的仓库分为两种，一种是public repositories公开免费版，一种是private repositories私有付费版其中，免费版是完全公开的，而私有版一般是由企业或者不愿公开仓库的个人用户购买，在这里，我们选择免费版就可以，然后点击 <b><em>Choose Free</em></b>，进入下一页</p><p>4.有一个问卷调查，填不填都无所谓，如果填完就点击 <b><em>Complete setup</em></b>, 如果不想填就点击 <b><em>Skip this step</em></b> 跳过。</p><p>5.接下来就是验证邮箱地址了，GitHub会发送邮件到你刚才填的邮箱地址，例如我填的是QQ邮箱，登录QQ邮箱，打开收到的邮件，点击 <b><em>Verify email address</em></b>, 进入Github的登录界面，点击<b><em>sign in</em></b>会要求填写验证码，再次进入邮箱查看验证码，填写后登录</p><p>6.进入Github后先创建一个代码仓库</p><h2 id="二、Git安装"><a href="#二、Git安装" class="headerlink" title="二、Git安装"></a>二、Git安装</h2><p>1.打开Git官网:<a href="https://git-scm.com/">Git官网</a>，点击 <b><em>Downloads</em></b>下载，选择对应系统类型，下载完成后直接 Next 安装，安装完成后直接打开 Git Bash 即可，点击鼠标右键如果存在 Git Bash 就证明安装成功</p><h2 id="三、绑定GitHub并提交文件"><a href="#三、绑定GitHub并提交文件" class="headerlink" title="三、绑定GitHub并提交文件"></a>三、绑定GitHub并提交文件</h2><h3 id="1-绑定GitHub"><a href="#1-绑定GitHub" class="headerlink" title="1.绑定GitHub"></a>1.绑定GitHub</h3><blockquote><p>我们要用git上传文件到GitHub首先得利用SSH登录远程主机，而登录方式有两种：一种是口令登录；另一种是公钥登录。口令登录每次都要输入密码十分麻烦，而公钥登录就省去了输入密码的步骤，所以我们选择公钥授权。首先我们得在 GitHub 上添加 SSH key 配置，要想生成SSH key，就要先安装 SSH，不过我们安装了 Git Bash，其应该自带了 SSH。检验一下是否安装 SSH，我们在新建的文件夹中右键打开 Git Bash：输入 ssh 命令，查看本机是否安装 SSH如已安装 SSH. 然后，输入 ssh-keygen -t rsa 命令（注意空格），表示我们指定 RSA 算法生成密钥，然后敲四次回车键，之后就就会生成两个文件，分别为秘钥 id_rsa 和公钥 id_rsa.pub. （注意：git中的复制粘贴不是 Ctrl+C 和 Ctrl+V，而是 Ctrl+insert 和 Shift+insert.）文件的位置在 Git Bash 上面都有显示，默认生成在以下目录：</p></blockquote><ul><li>Linux 系统：~&#x2F;.ssh</li><li>Mac 系统：~&#x2F;.ssh</li><li>Windows 10 ：C:&#x2F;Users&#x2F;ASUS&#x2F;.ssh</li></ul><p>接下来我们要做的事情就是把公钥 id_rsa.pub 的内容添加到 GitHub。复制公钥 id_rsa.pub 文件里的内容，你可以通过目录找到 id_rsa.pub 文件的位置，用记事本打开文件复制。如果你实在找不到文件也没有关系，按照以下步骤直接在 Git Bash 上打开就行：</p><pre class="line-numbers language-ssh" data-language="ssh"><code class="language-ssh">$ cd ~&#x2F;.ssh $ ls$ cat id_rsa.pub接下来进入我们的 GitHub 主页，先点击右上角，再点击 settings先点击 SSH and GPG keys，再点击 New SSH key.将复制的公钥 id_rsa.pub 的内容粘贴到 key 内，再点击 Add SSH key验证是否成功，我们可以通过在 Git Bash 中输入 ssh -T git@github.com 进行检验<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-提交文件"><a href="#2-提交文件" class="headerlink" title="2.提交文件"></a>2.提交文件</h3><p>提交文件有两种方法:</p><h4 id="第一种：本地没有-git-仓库"><a href="#第一种：本地没有-git-仓库" class="headerlink" title="第一种：本地没有 git 仓库"></a>第一种：本地没有 git 仓库</h4><p>1.直接将远程仓库 clone 到本地；</p><p>2.将文件添加并 commit 到本地仓库；</p><p>3.将本地仓库的内容push到远程仓库</p><h4 id="本地有-Git-仓库，并且我们已经进行了多次-commit-操作"><a href="#本地有-Git-仓库，并且我们已经进行了多次-commit-操作" class="headerlink" title="本地有 Git 仓库，并且我们已经进行了多次 commit 操作"></a>本地有 Git 仓库，并且我们已经进行了多次 commit 操作</h4><p>1.建立一个本地仓库进入，init 初始化；<br>2.关联远程仓库；<br>3.同步远程仓库和本地仓库；<br>4.将文件添加提交到本地仓库；<br>5.将本地仓库的内容 push 到远程仓库。</p><h4 id="第一种方法详细步骤"><a href="#第一种方法详细步骤" class="headerlink" title="第一种方法详细步骤"></a>第一种方法详细步骤</h4><p>首先，进入GitHub个人主页：<br>1.点击进入我新建的 text 项目：在 code 标签下点击右侧绿色的Code，选择HTTPS点击链接右侧的复制按钮<br>2.在你需要的文件夹下打开Git Bash 输入 git clone <a href="https://xxxx(刚刚复制的地址),将远程仓库/">https://xxxx(刚刚复制的地址)，将远程仓库</a> clone 到本地，git status命令查看仓库状态，然后我们使用 git add 命令将文件添加到了「临时缓冲区」，再用 git commit -m “提交信息” 将其提交到本地仓库<br>3.果你是第一次提交的话，会让你输入用户名和邮箱</p><blockquote><p>#你只要再加两行代码就行：<br>$ git config –global user.name”fengye97”<br>$ git config –global user.email”<a href="mailto:&#120;&#x78;&#120;&#64;&#x78;&#x78;&#x78;&#46;&#99;&#x6f;&#109;">&#120;&#x78;&#120;&#64;&#x78;&#x78;&#x78;&#46;&#99;&#x6f;&#109;</a>“<br>4.完成后输入 git log 命令查看仓库提交日志<br>5.再输入 git status 查看一下仓库状态<br>6.现在输入 git push origin master 命令，将本地仓库提交到远程仓库，origin是远程主机的名字</p></blockquote><h4 id="第二种方法详细步骤"><a href="#第二种方法详细步骤" class="headerlink" title="第二种方法详细步骤"></a>第二种方法详细步骤</h4><p>1.首先，我们建立一个本地仓库 demo，使用 git init 命令初始化这个仓库</p><p>2.输入 git remote add origin <a href="https://xxx(远程仓库地址)/">https://xxx(远程仓库地址)</a> 命令，关联远程仓库，接着输入 git pull origin master 命令，同步远程仓库和本地仓库</p><p>3.回到本地仓库，发现我们已经把远程仓库的内容同步到了本地仓库</p><p>4.接下来的步骤就与第一种方法一样（可以参考上面，已经写得很详细了），先输入 git add 和 git commit 命令，将要提交的文件添加并提交到 demo 仓库；然后再输入 git push origin master 命令，将本地仓库修改（或者添加）的内容提交到远程仓库就完成啦！！！</p><h1 id="node-js和Hexo"><a href="#node-js和Hexo" class="headerlink" title="node.js和Hexo"></a>node.js和Hexo</h1><h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1.下载地址：<a href="https://nodejs.org/en/">node.js官网</a><br>2.点击LTS 稳定版下载，下载完成后直接next 安装<br>3.安装完成可以用打开cmd检验一下是否安装成功，用 node -v 和 npm -v 命令检查版本</p><h3 id="设置npm在安装全局模块时的路径和环境变量"><a href="#设置npm在安装全局模块时的路径和环境变量" class="headerlink" title="设置npm在安装全局模块时的路径和环境变量"></a>设置npm在安装全局模块时的路径和环境变量</h3><blockquote><p>因为如果不设置的话，安装模块的时候就会把模块装到C盘，占用C盘的空间，并且有可能安装好hexo后却无法使用，所以我们需要设置一下<br>1.在 nodejs 文件夹中新建两个空文件夹 node_cache、node_global<br>2.打开cmd，输入如下两个命令<br>  <pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm config set prefix &quot;D:\nodejs\node_global&quot;npm config set cache &quot;D:\nodejs\node_cache&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>3.设置环境变量：win10系统 –&gt; 打开控制面板 –&gt; 系统 –&gt;高级系统设置 –&gt; 环境变量 ，然后在系统变量中新建一个变量名为“NODE_PATH”，值为“D:\nodejs\node_global\node_modules”(node的安装目录)</p></blockquote><p>4.然后编辑用户变量里的Path，将相应npm的路径改为：D:\nodejs\node_global</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在 cmd 命令下执行 npm install webpack -g，然后 webpack 这个模块已经在我们设置默认的文件夹中了</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>1.Hexo就是我们的个人博客网站的框架，在安装之前，我们要先在GitHub上创立一个仓库<br>2.仓库名称为 用户名.github.io<br>3.接下来就是安装Hexo，首先在D盘建立一个文件夹 Blog，点开 Blog 文件夹，鼠标右键打开 Git Bush Here，输入npm命令安装Hexo<br><code>npm install -g hexo-cli</code><br>4.安装完成后，输入 hexo init 命令初始化博客<br>5.然后输入 hexo g 静态部署<br>6.这时网页已经部署完成，输入 hexo s 命令可以在本地查看</p><h3 id="将Hexo部署到GitHub"><a href="#将Hexo部署到GitHub" class="headerlink" title="将Hexo部署到GitHub"></a>将Hexo部署到GitHub</h3><p>1.现在回到我们的 Blog 文件夹，用笔记本打开 _config.yml 文件<br>下滑到文件底部，填上如下内容:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repository</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/fengye97/fengye97.github.io.git  <span class="token comment">#你的仓库地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.然后回到 Blog 文件夹中，打开 Git Bash，安装Git部署插件，输入命令<br><code>npm install hexo-deployer-git --save</code><br>3.然后分别输入以下三条命令</p><pre class="line-numbers language-hexo" data-language="hexo"><code class="language-hexo">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 publichexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.完成以后，打开浏览器，输入 <a href="https://xxx.github.io/">https://xxx.github.io</a> 就可以打开你的网页了</p><h1 id="设置next主题"><a href="#设置next主题" class="headerlink" title="设置next主题"></a>设置next主题</h1><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p><a href="https://github.com/theme-next/hexo-theme-next">next主题Github</a><br>打开博客根目录Blog文件夹，右键Git Bash，输入如下代码将next主题下载到目录Blog&#x2F;themes</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone https://github.com/theme-next/hexo-theme-next themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.打开根目录下的_config.yml(称为站点配置文件)，修改主题（注意冒号后都要有空格）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> D  <span class="token comment">#标题</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token key atrule">description</span><span class="token punctuation">:</span> 选择有时候比努力更重要     <span class="token comment">#简介或者格言</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span><span class="token key atrule">author</span><span class="token punctuation">:</span> D     <span class="token comment">#作者</span><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN     <span class="token comment">#主题语言</span><span class="token key atrule">timezone</span><span class="token punctuation">:</span> Asia/Shanghai    <span class="token comment">#中国的时区 (不能乱改城市)</span><span class="token comment"># Extensions</span><span class="token comment">## Plugins: https://hexo.io/plugins/</span><span class="token comment">## Themes: https://hexo.io/themes/</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> next   <span class="token comment">#主题改为next (此处可更改你下载的主题)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <font color='red' size='2'>tip: 主题语言主要是看你的themes&#x2F;next&#x2F;language中的简体中文是 zh-CN 还是 zh-Hans </font></p><p> next主题有四种，依次为Muse、Mist、Pisces、Gemini<br> 我选的是Gemini，打开目录Blog&#x2F;themes&#x2F;next&#x2F;下的_config.yml（称为主题配置文件），只要将你选的主题前的#删除就行了<br> <pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Schemes</span><span class="token comment">#scheme: Muse</span><span class="token comment">#scheme: Mist</span><span class="token comment">#scheme: Pisces</span><span class="token key atrule">scheme</span><span class="token punctuation">:</span> Gemini    <span class="token comment">#这是我选的主题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p> 回到根目录打开Git Bash，输入如下三条命令,完成后打开博客可以看到效果<br> <pre class="line-numbers language-hexo" data-language="hexo"><code class="language-hexo">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h1 id="优化主题"><a href="#优化主题" class="headerlink" title="优化主题"></a>优化主题</h1><h2 id="1-设置菜单"><a href="#1-设置菜单" class="headerlink" title="1.设置菜单"></a>1.设置菜单</h2><p>打开主题配置文件即themes&#x2F;next下的_config.yml，查找menu，将前面的#删除就行了</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">home</span><span class="token punctuation">:</span> / <span class="token punctuation">|</span><span class="token punctuation">|</span> home                      <span class="token comment">#首页</span>  <span class="token key atrule">archives</span><span class="token punctuation">:</span> /archives/ <span class="token punctuation">|</span><span class="token punctuation">|</span> archive      <span class="token comment">#归档</span>  <span class="token key atrule">categories</span><span class="token punctuation">:</span> /categories/ <span class="token punctuation">|</span><span class="token punctuation">|</span> th       <span class="token comment">#分类</span>  <span class="token key atrule">tags</span><span class="token punctuation">:</span> /tags/ <span class="token punctuation">|</span><span class="token punctuation">|</span> tags                 <span class="token comment">#标签</span>  <span class="token key atrule">about</span><span class="token punctuation">:</span> /about/ <span class="token punctuation">|</span><span class="token punctuation">|</span> user               <span class="token comment">#关于</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> /resources/ <span class="token punctuation">|</span><span class="token punctuation">|</span> download   <span class="token comment">#资源</span>  <span class="token comment">#schedule: /schedule/ || calendar    #日历</span>  <span class="token comment">#sitemap: /sitemap.xml || sitemap    #站点地图，供搜索引擎爬取</span>  <span class="token comment">#commonweal: /404/ || heartbeat      #腾讯公益404</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  “||”前面的是目标链接，后面的是图标名称，next使用的图标全是<a href="http://www.fontawesome.com.cn/faicons/#web-application">图标库 - Font Awesome 中文网</a>这一网站的，有想用的图标直接在fontawesome上面找图标的名称就行。resources是我自己添加的。</p><p>新添加的菜单需要翻译对应的中文，打开theme&#x2F;next&#x2F;languages&#x2F;zh-CN.yml，在menu下设置</p><pre class="line-numbers language-yml:" data-language="yml:"><code class="language-yml:">menu:  home: 首页  archives: 归档  categories: 分类  tags: 标签  about: 关于  resources: 资源  search: 搜索<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在根目录下打开Git Bash，输入如下代码，创建对应的文件夹</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">hexo new page <span class="token string">"categories"</span>  hexo new page <span class="token string">"tags"</span>hexo new page <span class="token string">"about"</span>hexo new page <span class="token string">"resources"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时在根目录的sources文件夹下会生成categories、tags、about、resources四个文件，每个文件中有一个index.md文件，修改内容分别如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 分类<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-02-10 22:07:08</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">comments</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></span><span class="token punctuation">---</span></span><span class="token hr punctuation">---</span>title: 标签date: 2020-02-10 22:07:08type: "tags"<span class="token title important">comments: false<span class="token punctuation">---</span></span><span class="token hr punctuation">---</span>title: 关于date: 2020-02-10 22:07:08type: "about"<span class="token title important">comments: false<span class="token punctuation">---</span></span><span class="token hr punctuation">---</span>title: 资源date: 2020-02-10 22:07:08type: "resources"<span class="token title important">comments: false<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注:<font color='red' size='2'>如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false</font></p><h2 id="2-设置建站时间"><a href="#2-设置建站时间" class="headerlink" title="2. 设置建站时间"></a>2. 设置建站时间</h2><p>打开主题配置文件即themes&#x2F;next下的_config.yml，查找since</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">footer</span><span class="token punctuation">:</span>  <span class="token comment"># Specify the date when the site was setup. If not defined, current year will be used.</span>  <span class="token key atrule">since</span><span class="token punctuation">:</span> 2020<span class="token punctuation">-</span><span class="token number">02</span>   <span class="token comment">#建站时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-设置头像"><a href="#3-设置头像" class="headerlink" title="3. 设置头像"></a>3. 设置头像</h2><p>打开主题配置文件即themes&#x2F;next下的_config.yml，查找avatar，url后是图片的链接地址</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Sidebar Avatar</span><span class="token key atrule">avatar</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> /images/avatar.gif   <span class="token comment">#图片的位置，也可以是http://xxx.com/avatar.png</span>  <span class="token key atrule">rounded</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment">#头像展示在圈里</span>  <span class="token key atrule">rotated</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment">#头像随光标旋转</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-网站图标设置"><a href="#4-网站图标设置" class="headerlink" title="4.网站图标设置"></a>4.网站图标设置</h2><p>免费的图标素材网站：<a href="https://www.easyicon.cc/">Easyicon</a><br>下载16x16和32x32的图标后，打开主题配置文件，查找favicon，只要修改small和medium为你的图标路径</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">favicon</span><span class="token punctuation">:</span>  <span class="token key atrule">small</span><span class="token punctuation">:</span> /images/favicon<span class="token punctuation">-</span>16x16.png  <span class="token key atrule">medium</span><span class="token punctuation">:</span> /images/favicon<span class="token punctuation">-</span>32x32.png  <span class="token key atrule">apple_touch_icon</span><span class="token punctuation">:</span> /images/apple<span class="token punctuation">-</span>touch<span class="token punctuation">-</span>icon<span class="token punctuation">-</span>next.png  <span class="token key atrule">safari_pinned_tab</span><span class="token punctuation">:</span> /images/logo.svg  <span class="token comment">#android_manifest: /images/manifest.json</span>  <span class="token comment">#ms_browserconfig: /images/browserconfig.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-设置动态背景"><a href="#5-设置动态背景" class="headerlink" title="5. 设置动态背景"></a>5. 设置动态背景</h2><h3 id="5-1-canvas-nest-风格"><a href="#5-1-canvas-nest-风格" class="headerlink" title="5.1 canvas nest 风格"></a>5.1 canvas nest 风格</h3><p>在themes&#x2F;next目录下打开Git Bash，输入</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开主题配置文件即themes&#x2F;next下的_config.yml，将下面的代码复制粘贴到themes&#x2F;next中</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Canvas-nest</span><span class="token comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span><span class="token comment"># For more information: https://github.com/hustcc/canvas-nest.js</span><span class="token key atrule">canvas_nest</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">onmobile</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Display on mobile or not</span>  <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token string">"0,0,255"</span> <span class="token comment"># RGB values, use `,` to separate</span>  <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token number">0.5</span> <span class="token comment"># The opacity of line: 0~1</span>  <span class="token key atrule">zIndex</span><span class="token punctuation">:</span> <span class="token number">-1</span> <span class="token comment"># z-index property of the background</span>  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">99</span> <span class="token comment"># The number of lines</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-JavaScript-3D-library风格"><a href="#5-2-JavaScript-3D-library风格" class="headerlink" title="5.2 JavaScript 3D library风格"></a>5.2 JavaScript 3D library风格</h3><p>在themes&#x2F;next目录下打开Git Bash，输入：</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone https://github.com/theme-next/theme-next-three source/lib/three<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开主题配置文件即themes&#x2F;next下的_config.yml，找到three，这里有三种风格，可以试一下看看喜欢哪种风格，直接将false改为true就行了，我已经选了canvas-nest，就没有选这种风格</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># JavaScript 3D library.</span><span class="token comment"># Dependencies: https://github.com/theme-next/theme-next-three</span><span class="token key atrule">three</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">three_waves</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">canvas_lines</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">canvas_sphere</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-设置背景图片"><a href="#6-设置背景图片" class="headerlink" title="6. 设置背景图片"></a>6. 设置背景图片</h3><p>打开主题配置文件即themes&#x2F;next下的_config.yml，将 <code>style: source/_data/styles.styl</code> 取消注释</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">custom_file_path</span><span class="token punctuation">:</span>  <span class="token key atrule">style</span><span class="token punctuation">:</span> source/_data/styles.styl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打开根目录Blog&#x2F;source创建文件_data&#x2F;styles.styl，添加以下内容：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// 添加背景图片body</span> <span class="token punctuation">&#123;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>images/background.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>//自己喜欢的图片地址      <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>      <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>      <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>      <span class="token property">background-position</span><span class="token punctuation">:</span> 50% 50%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-主页文章-卡片-添加阴影效果"><a href="#7-主页文章-卡片-添加阴影效果" class="headerlink" title="7. 主页文章(卡片)添加阴影效果"></a>7. 主页文章(卡片)添加阴影效果</h3><p>打开<code>themes/next/source/css/_common/conponents/post/post.styl</code>，修改.post-block，如下：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.use-motion</span> <span class="token punctuation">&#123;</span>  <span class="token selector">if (hexo-config('motion.transition.post_block'))</span> <span class="token punctuation">&#123;</span>    <span class="token selector">.post-block</span> <span class="token punctuation">&#123;</span>      <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">margin-top</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>      <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>      <span class="token property">padding</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>0.9<span class="token punctuation">)</span> none repeat scroll <span class="token important">!important</span><span class="token punctuation">;</span>      <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> 0 0 5px <span class="token function">rgba</span><span class="token punctuation">(</span>202<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> 0 0 5px <span class="token function">rgba</span><span class="token punctuation">(</span>202<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> 204<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.pagination, .comments</span><span class="token punctuation">&#123;</span>      <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-添加顶部加载条"><a href="#8-添加顶部加载条" class="headerlink" title="8. 添加顶部加载条"></a>8. 添加顶部加载条</h3><p>在themes&#x2F;next目录下打开Git Bash，输入：</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone https://github.com/theme-next/theme-next-pace source/lib/pace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开主题配置文件即themes&#x2F;next下的_config.yml，找到pace，将enable：false改为true，你还可以选择类型（theme)</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">pace</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># Themes list:</span>  <span class="token comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span>  <span class="token comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> minimal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-设置预览摘要"><a href="#9-设置预览摘要" class="headerlink" title="9. 设置预览摘要"></a>9. 设置预览摘要</h3><p>只要我们在文章中插入 <!-- more -->，该标签之上的是摘要，之后的内容不可见，需点击全文阅读按钮</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token comment">&lt;!-- more --></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置侧边栏显示效果"><a href="#设置侧边栏显示效果" class="headerlink" title="设置侧边栏显示效果"></a>设置侧边栏显示效果</h3><p>打开主题配置文件即themes&#x2F;next下的_config.yml，找到Sidebar Settings，设置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sidebar</span><span class="token punctuation">:</span>  <span class="token comment"># Sidebar Position. #设置侧边栏位置</span>  <span class="token key atrule">position</span><span class="token punctuation">:</span> left  <span class="token comment">#position: right</span>  <span class="token comment">#  - post    默认显示模式</span>  <span class="token comment">#  - always  一直显示</span>  <span class="token comment">#  - hide    初始隐藏</span>  <span class="token comment">#  - remove  移除侧边栏</span>  <span class="token key atrule">display</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-侧边栏推荐阅读"><a href="#11-侧边栏推荐阅读" class="headerlink" title="11.侧边栏推荐阅读"></a>11.侧边栏推荐阅读</h3><p>打开<strong>主题配置文件</strong>即themes&#x2F;next下的_config.yml，搜索links（里面写你想要的链接）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">links_settings</span><span class="token punctuation">:</span>  <span class="token key atrule">icon</span><span class="token punctuation">:</span> link  <span class="token key atrule">title</span><span class="token punctuation">:</span> 链接网站  <span class="token comment">#修改名称</span><span class="token key atrule">links</span><span class="token punctuation">:</span>  <span class="token comment">#Title: http://yoursite.com</span>  <span class="token key atrule">百度</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//baidu.com  <span class="token key atrule">鱼C论坛</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//fishc.com.cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-添加社交链接"><a href="#12-添加社交链接" class="headerlink" title="12. 添加社交链接"></a>12. 添加社交链接</h3><p>打开<strong>主题配置文件</strong>即themes&#x2F;next下的_config.yml，搜索social</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">social</span><span class="token punctuation">:</span>  <span class="token key atrule">GitHub</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/fengye97 <span class="token punctuation">|</span><span class="token punctuation">|</span> github  <span class="token key atrule">E-Mail</span><span class="token punctuation">:</span> mailto<span class="token punctuation">:</span>yinhongfei1018@163.com <span class="token punctuation">|</span><span class="token punctuation">|</span> envelope  <span class="token key atrule">知乎</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.zhihu.com/people/mai<span class="token punctuation">-</span>nv<span class="token punctuation">-</span>hai<span class="token punctuation">-</span>de<span class="token punctuation">-</span>xiao<span class="token punctuation">-</span>huo<span class="token punctuation">-</span>chai<span class="token punctuation">-</span>35<span class="token punctuation">-</span>19 <span class="token punctuation">|</span><span class="token punctuation">|</span> gratipay  <span class="token key atrule">CSDN</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//https<span class="token punctuation">:</span>//blog.csdn.net/Later_001 <span class="token punctuation">|</span><span class="token punctuation">|</span> codiepie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“||”前面的是链接，后面的是 <a href="http://www.fontawesome.com.cn/faicons/#web-application">FontAwesome</a>图标。</p><h3 id="13-设置博文内链接为蓝色并加入下划线"><a href="#13-设置博文内链接为蓝色并加入下划线" class="headerlink" title="13. 设置博文内链接为蓝色并加入下划线"></a>13. 设置博文内链接为蓝色并加入下划线</h3><p>打开<code>themes/next/source/css/_common/components/post/post.styl</code>文件，将下面的代码复制到文件最后</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.post-body p a</span><span class="token punctuation">&#123;</span>     <span class="token property">color</span><span class="token punctuation">:</span> #0593d3<span class="token punctuation">;</span>     <span class="token property">border-bottom</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>     <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>     <span class="token selector">&amp;:hover</span> <span class="token punctuation">&#123;</span>       <span class="token property">color</span><span class="token punctuation">:</span> #0477ab<span class="token punctuation">;</span>       <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-显示文章字数和阅读时长"><a href="#14-显示文章字数和阅读时长" class="headerlink" title="14. 显示文章字数和阅读时长"></a>14. 显示文章字数和阅读时长</h3><p>从根目录Blog打开Git Bash，执行下面的命令，安装插件：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">npm install hexo-symbols-count-time --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后打开<strong>站点配置文件</strong>，在文件末尾加上下面的代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">symbols_count_time</span><span class="token punctuation">:</span>  <span class="token key atrule">symbols</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 文章字数统计</span>  <span class="token key atrule">time</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 文章阅读时长</span>  <span class="token key atrule">total_symbols</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 站点总字数统计</span>  <span class="token key atrule">total_time</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 站点总阅读时长</span>  <span class="token key atrule">exclude_codeblock</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 排除代码字数统计</span>  <span class="token key atrule">awl</span><span class="token punctuation">:</span> <span class="token number">4</span>  <span class="token key atrule">wpm</span><span class="token punctuation">:</span> <span class="token number">275</span>  <span class="token key atrule">suffix</span><span class="token punctuation">:</span> <span class="token string">"mins."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="15-设置文章末尾”本文结束”标记"><a href="#15-设置文章末尾”本文结束”标记" class="headerlink" title="15. 设置文章末尾”本文结束”标记"></a>15. 设置文章末尾”本文结束”标记</h3><p>在路径<code>/themes/next/layout/_macro</code> 中新建 <code>passage-end-tag.swig </code> 文件,并添加以下内容：</p><pre class="line-numbers language-swig" data-language="swig"><code class="language-swig">&lt;div&gt;    &#123;% if not is_index %&#125;        &lt;div style&#x3D;&quot;text-align:center;color: #ccc;font-size:24px;&quot;&gt;-------------本文结束&lt;i class&#x3D;&quot;fa fa-paw&quot;&gt;&lt;&#x2F;i&gt;感谢您的阅读-------------&lt;&#x2F;div&gt;    &#123;% endif %&#125;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着打开<code>/themes/next/layout/_macro/post.swig</code>文件，在<strong>END POST BODY</strong>后添加代码</p><pre class="line-numbers language-swig" data-language="swig"><code class="language-swig">&#123;% if not is_index and theme.passage_end_tag.enabled %&#125;  &lt;div&gt;    &#123;% include &#39;passage-end-tag.swig&#39; %&#125;  &lt;&#x2F;div&gt;&#123;% endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 然后打开<strong>主题配置文件</strong>（_config.yml)，在末尾添加：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 文章末尾添加“本文结束”标记</span><span class="token key atrule">passage_end_tag</span><span class="token punctuation">:</span>  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="16-文章末尾添加版权说明"><a href="#16-文章末尾添加版权说明" class="headerlink" title="16. 文章末尾添加版权说明"></a>16. 文章末尾添加版权说明</h3><p>查找主题配置文件<code>themes/next/_config.yml</code>中的creative_commons：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">creative_commons</span><span class="token punctuation">:</span>  <span class="token key atrule">license</span><span class="token punctuation">:</span> by<span class="token punctuation">-</span>nc<span class="token punctuation">-</span>sa  <span class="token key atrule">sidebar</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">post</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 将false改为true即可显示版权信息</span>  language<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-添加访问量统计"><a href="#17-添加访问量统计" class="headerlink" title="17. 添加访问量统计"></a>17. 添加访问量统计</h3><p>打开<strong>主题配置文件</strong>即themes&#x2F;next下的_config.yml，找到busuanzi_count，改为true</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">busuanzi_count</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打开<code>/themes/next/layout/_partials/footer.swig</code>，在最后添加如下内容：</p><pre class="line-numbers language-swig" data-language="swig"><code class="language-swig">&#123;% if theme.busuanzi_count.enable %&#125;    &lt;script async src&#x3D;&quot;&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;    &lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot;&gt;总访问量&lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;次&lt;&#x2F;span&gt;    &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;    &lt;span id&#x3D;&quot;busuanzi_container_site_uv&quot;&gt;总访客数&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;人&lt;&#x2F;span&gt;    &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;&lt;!-- 不蒜子计数初始值纠正 --&gt;&lt;script&gt;$(document).ready(function() &#123;    var int &#x3D; setInterval(fixCount, 50);  &#x2F;&#x2F; 50ms周期检测函数    var countOffset &#x3D; 20000;  &#x2F;&#x2F; 初始化首次数据    function fixCount() &#123;                   if (document.getElementById(&quot;busuanzi_container_site_pv&quot;).style.display !&#x3D; &quot;none&quot;)        &#123;            $(&quot;#busuanzi_value_site_pv&quot;).html(parseInt($(&quot;#busuanzi_value_site_pv&quot;).html()) + countOffset);             clearInterval(int);        &#125;                          if ($(&quot;#busuanzi_container_site_pv&quot;).css(&quot;display&quot;) !&#x3D; &quot;none&quot;)        &#123;            $(&quot;#busuanzi_value_site_uv&quot;).html(parseInt($(&quot;#busuanzi_value_site_uv&quot;).html()) + countOffset); &#x2F;&#x2F; 加上初始数据             clearInterval(int); &#x2F;&#x2F; 停止检测        &#125;      &#125;       &#125;);&lt;&#x2F;script&gt; &#123;% endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-代码块样式自定义"><a href="#17-代码块样式自定义" class="headerlink" title="17. 代码块样式自定义"></a>17. 代码块样式自定义</h3><p>打开根目录<code>Blog/source/_data/styles.styl</code>，添加以下内容：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// Custom styles.code</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #ff7600<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #fbf7f8<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">// 大代码块的自定义样式.highlight, pre</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 5px 0<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.highlight, code, pre</span> <span class="token punctuation">&#123;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #d6d6d6<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-本地搜索"><a href="#18-本地搜索" class="headerlink" title="18. 本地搜索"></a>18. 本地搜索</h3><p>打开cmd安装插件：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">npm install hexo-generator-search<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查找主题配置文件<code>themes/next/_config.yml</code>中的local_search</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">local_search</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">trigger</span><span class="token punctuation">:</span> manual   <span class="token comment">#手动，按回车键或搜索按钮触发搜索</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="19-博文置顶"><a href="#19-博文置顶" class="headerlink" title="19.博文置顶"></a>19.博文置顶</h3><h4 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="(1) 安装插件"></a>(1) 安装插件</h4><p>在根目录Blog打开Git Bash，执行下面的命令：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">npm uninstall hexo-generator-index --savenpm install hexo-generator-index-pin-top --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="（2）设置置顶标志"><a href="#（2）设置置顶标志" class="headerlink" title="（2）设置置顶标志"></a>（2）设置置顶标志</h4><p>打开<code>blog/themes/next/layout/_macro</code>目录下的post.swig文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，插入如下代码：  </p><pre class="line-numbers language-swig" data-language="swig"><code class="language-swig">&#123;% if post.top %&#125;  &lt;i class&#x3D;&quot;fa fa-thumb-tack&quot;&gt;&lt;&#x2F;i&gt;  &lt;font color&#x3D;7D26CD&gt;置顶&lt;&#x2F;font&gt;  &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;&#123;% endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）在文章中添加top"><a href="#（3）在文章中添加top" class="headerlink" title="（3）在文章中添加top"></a>（3）在文章中添加top</h4><p>然后在需要置顶的文章的Front-matter中加上top: true即可，如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> Hello World<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> next </category>
          
      </categories>
      
      
        <tags>
            
            <tag> next主题 </tag>
            
            <tag> hexo框架 </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="//post/Git.html"/>
      <url>//post/Git.html</url>
      
        <content type="html"><![CDATA[<h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><blockquote><p>每当修改一个文件到一定程度的时候，可以commit一个快照，如果不小心把文件改乱了或者删除了，可以通过这个commit来恢复。</p></blockquote><ol><li><p>使用git log命令查看最近提交日志 加上<code>--pretty=oneline</code>参数简化输出信息</p><blockquote><p>要回退到上个版本，Git需要知道是哪个版本，在Git中<em>HEAD</em>表示的是当前版本，上一个版本就是<em>HEAD^</em>,上上个版本就是<em>HEAD^^</em>，往上100个版本可以写成<em>HEAD~100</em></p></blockquote></li><li><p>使用 git reset 命令回退到上一个版本</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git reset --hard HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看文件就已经回到了上一个版本，但是户发现，最新的版本在git log 里面没有了,这并意问这就不能回到最新版本了，知道知道他的commit id，就可以使用 <code>git reset --hard commit id</code>来回滚。commit id输入前5位就行</p></li><li><p>使用 git reflog 来查看git操作记录</p><blockquote><p>这个命令可以查看所有的命令使用记录，在这可以看到commit id</p></blockquote></li></ol><h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><ol><li>git diff HEAD – readme.txt</li></ol><ul><li>可以查看工作区和版本库里面的最新版本的区别</li></ul><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><ol><li>git checkout – 文件名(相对路径)</li></ol><ul><li>可以把文件在工作区的更改全部撤销，有两种情况</li></ul><ol><li><p>文件修改后还没有放到暂存区，现在，撤销修改就回到和版本库一模一样的状态</p></li><li><p>文件修改后添加到了暂存区，已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态</p></li><li><p>git reset HEAD <file></p><blockquote><p>错误的修改了，一个文件，不小心add到了暂存区可以把暂存区的修改撤销掉，重新放回工作区，然后在之下 git checkout – 文件名，丢弃工作区的修改</p></blockquote></li></ol><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><blockquote><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：<br>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：<br>现在，文件就从版本库中被删除了。<br>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -- test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><ol><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch &lt;name&gt;</code></li><li>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></li><li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></li><li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li><li>删除分支：<code>git branch -d &lt;name&gt;</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js</title>
      <link href="//post/Vue.js.html"/>
      <url>//post/Vue.js.html</url>
      
        <content type="html"><![CDATA[<h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
